/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mazegame;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.JComponent;
import javax.swing.JFrame;
import java.util.ArrayList;
import java.util.Random;

/**
 *
 * @author NoahTelussa
 */
public class MazeGame extends javax.swing.JFrame {

    static Grid grid = new Grid();
    static Player player = new Player();
    private int dimX;
    private int dimY;
    /**
     * Creates new form MazeGame
     */
    public MazeGame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        // TODO add your handling code here:
              //Get the keycode of the key (like the left arrow)
                int keyCode = evt.getKeyCode();
                //If the user press one of the arrow keys

//                int[][] corners = grid.getCorners();

//                System.out.println(spider.getXPosition() + "-" + spider.getYPosition());
                if (keyCode == KeyEvent.VK_LEFT) {                     //Left arrow key
//                    if (spider.getXPosition() >= corners[0][0]) {       //If the position is on the left border
                    player.turn(3);
                    player.move();
//                    }
                } else if (keyCode == KeyEvent.VK_RIGHT) {              //right arrow key
//                    if (spider.getXPosition() <= corners[1][0]) {        //If the position is on the right border
                    player.turn(1);
                    player.move();
//                    }
                } else if (keyCode == KeyEvent.VK_UP) {                 //Up arrow key
//                    if (corners[0][0] <= spider.getYPosition()) {        //If the position is on the up border
                    player.turn(2);
                    player.move();
//                    }
                } else if (keyCode == KeyEvent.VK_DOWN) {                //Down arrow key
//                    if (spider.getYPosition() <= corners[2][1]) {       //If the position is on the down border
                    player.turn(0);
                    player.move();
//                    }
                }

                System.out.println(player.toString());


                //After we assign the new position and turn to the "Spider"
                //repaint all the rectangle (Maybe not the best way to do it)
                this.repaint();
    }//GEN-LAST:event_formKeyReleased

    /**
     * @param args the command line arguments
     */
    
    public void paint(Graphics g) {
        super.paint(g);

        //First we assign how big the big the board needs to be
        //For some reason its a 10x10 now (it divdes with 3)
        //Need to look in more why this is happening
        dimX = 60; // this is not the best solution
        dimY = 60; // for defining the size of the game!

        grid.calculateCorners(dimX, dimY);

        //Because the board is 60 * every time you need to multiple the position
        //Need to look in more why this is happening
        int spiderXPosition = player.getXPosition() * 30;
        int spiderYPosition = player.getYPosition() * 30;

       

        //Print the grid out with the spider and the fly
        //Draw all the rectangles in the screen
        for (int x = dimX; x <= 600; x += 30) {
//            System.out.println(x);
            for (int y = dimY; y <= 600; y += 30) {
                //If the rectangles is the same position as the spider x and y

                if (x == spiderXPosition && y == spiderYPosition) {
                    //Set the spider color (Red)
                    g.setColor(Color.RED);
                    //Draw a rectangle filling the square
                    g.fillRect(x, y, 30, 30);
                    g.drawRect(x, y, 30, 30);
                    //Set the color agian to black because else every thing else is Red
                    g.setColor(Color.BLACK);

                    //fill the grid where the fly is
                  } else {
                    //If the position is not the same as the fly or spider, draw a simple rectangle
                    g.drawRect(x, y, 30, 30);
                }
            }
        }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MazeGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MazeGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MazeGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MazeGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MazeGame().setVisible(true);
                
                    // TODO code application logic here
       
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
